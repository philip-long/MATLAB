#!/usr/bin/env python

# TODO: Check that time of waypoint when resuming trajectory is correct

# From scheduled times and positions, allow user to pause trajectory to take
# manual control. After performing manual movement, trajectory can be resumed
# starting from last non-hit waypoint.

import sys
import time
import numpy as np
import rospy
import tf
from math import fabs
from scipy.interpolate import PchipInterpolator
from geometry_msgs.msg import PoseStamped
from ihmc_msgs.msg import HandTrajectoryRosMessage, SE3TrajectoryPointRosMessage

# For handling pause/resume of trajectory
import threading
import select

# Frame that position waypoints are in
REFERENCE_FRAME = '/leftFoot'

# Dictionary for robot side
ROBOT_SIDE = {'left': 0, 'right': 1}

# Use constant orientation for now
left_orientation = [ 0.650, 0.070, 0.021, -0.756 ]
right_orientation = [ 0.647, -0.066, 0.020, 0.759 ]

# Offset value for moving point from wrist to center of palm
left_offset = [0.01, 0.09, -0.01, 1.0]
right_offset = [0.0, -0.08, -0.01, 1.0]

# Globals for when left palm key and right palm key have been entered
l_press = False
r_press = False

# Handle x, y, z interpolation by storing interpolation functions for
# each dimension.
class PosInterpolation:
    def __init__(self, waypoints, times = []):
        self.createInterpolation(waypoints, times)
        self.number_points = len(waypoints)

    def createInterpolation(self, waypoints, times = []):
        # Create the x time values
        if times == []:
            times = [t for t in range(len(waypoints))]

        # Collect x, y, and z values
        x_vals = []
        y_vals = []
        z_vals = []

        for point in waypoints:
            x_vals.append(point[0])
            y_vals.append(point[1])
            z_vals.append(point[2])

        # Create interpolation functions for xyz position
        self.x_interpolate = PchipInterpolator(times, x_vals, extrapolate = False)
        self.y_interpolate = PchipInterpolator(times, y_vals, extrapolate = False)
        self.z_interpolate = PchipInterpolator(times, z_vals, extrapolate = False)

    # Get x, y, z list of position at given time. Time is between
    # 0 and self.number_points.
    def getPos(self, time):
        x = self.x_interpolate(time)
        y = self.y_interpolate(time)
        z = self.z_interpolate(time)

        return [x, y, z]

    # Get x, y, z velocity at the given time. Time is between 0 and
    # self.number_points.
    def getVel(self, time):
        x_vel = self.x_interpolate(time, 1)
        y_vel = self.y_interpolate(time, 1)
        z_vel = self.z_interpolate(time, 1)

        return [x_vel, y_vel, z_vel]

    # Return (steps * self.number_points) data points,
    # each (1 / steps) time away from each other
    def getSteppedValues(self, steps):
        times = []
        waypoints = []
        vel = []
        time_step = 1.0 / steps
        for idx in range(self.number_points):
            # Just append the last point
            if idx == self.number_points - 1:
                times.append(idx)
                waypoints.append(self.getPos(idx))
                vel.append(self.getVel(idx))
                break

            # Otherwise get interpolated points
            for step in range(steps):
                time = idx + (time_step * step)
                times.append(time)
                waypoints.append(self.getPos(time))
                vel.append(self.getVel(time))

        return waypoints, times, vel

# Get current position of lookup_frame using ref_frame as reference
def getTF(lookup_frame, ref_frame):
    return tfListener.lookupTransform(ref_frame, lookup_frame, rospy.Time())

# Offset position values by offset
# orientation is a single [w, x, y, z] value
# positions is a list of [x, y, z] values to offset
# offset is a single [x, y, z] value to offset each positions value by
def offsetPoints(orientation, positions, offset):
    # Convert orientation from [w, x, y, z] to [x, y, z, w]
    format_orientation = [orient for orient in orientation[1:]] + [orientation[0]]
    rotation_matrix = tf.transformations.quaternion_matrix(format_orientation)

    offset_points = []
    for point in positions:
        t_matrix = rotation_matrix
        t_matrix[0:3, 3] = point
        offset_point = np.dot(t_matrix, offset)[0:3]
        offset_points.append(offset_point)

    return offset_points

# Returns time, position, and velocity values for the times with the number
# of steps between each time value
def downsample(interpolation, times, steps):
    new_time = []
    new_pos = []
    new_vel = []
    for i in range(len(times)):
        if i == len(times) - 1:
            new_time.append(times[i])
            new_pos.append(interpolation.getPos(times[i]))
            new_vel.append(interpolation.getVel(times[i]))
            continue
        dif = times[i + 1] - times[i]
        time_step = dif / float(steps)
        for j in range(steps):
            time = times[i] + (time_step * j)
            new_time.append(time)
            new_pos.append(interpolation.getPos(time))
            new_vel.append(interpolation.getVel(time))

    return new_time, new_pos, new_vel

# Build HandTrajectoryRosMessage from the given data
def toHandTrajectoryMsg(waypoints, times, velocities, side):
    msg = HandTrajectoryRosMessage(unique_id = 1, base_for_control=1, 
        robot_side = side)

    # Factor to change movement speed. 2 moves at double speed,
    # 0.5 moves at half speed, etc
    factor = 0.25

    # HandTrajectoryRosMessage specifies that trajectory points are in world
    # frame. These have to be converted from REFERENCE_FRAME to world frame
    for idx, point in enumerate(waypoints):
        new_waypoint = SE3TrajectoryPointRosMessage(
            time = (times[idx] / float(factor)))

        # Create PoseStamped geometry_msg for pelvis to world transform
        ps = PoseStamped()
        ps.header.frame_id = REFERENCE_FRAME
        ps.pose.position.x = point[0]
        ps.pose.position.y = point[1]
        ps.pose.position.z = point[2]
        ps.pose.orientation.w = 0
        ps.pose.orientation.x = 0
        ps.pose.orientation.y = 0
        ps.pose.orientation.z = 0
        ps = tfListener.transformPose('/world', ps)
        new_waypoint.position = ps.pose.position

        # Currently use constant orientation
        if side == ROBOT_SIDE['right']:
            new_waypoint.orientation.w = right_orientation[0]
            new_waypoint.orientation.x = right_orientation[1]
            new_waypoint.orientation.y = right_orientation[2]
            new_waypoint.orientation.z = right_orientation[3]
        else:
            new_waypoint.orientation.w = left_orientation[0]
            new_waypoint.orientation.x = left_orientation[1]
            new_waypoint.orientation.y = left_orientation[2]
            new_waypoint.orientation.z = left_orientation[3]

        # Set velocities
        new_waypoint.linear_velocity.x = velocities[idx][0] * float(factor)
        new_waypoint.linear_velocity.y = velocities[idx][1] * float(factor)
        new_waypoint.linear_velocity.z = velocities[idx][2] * float(factor)
        new_waypoint.angular_velocity.x = 0.01
        new_waypoint.angular_velocity.y = 0.01
        new_waypoint.angular_velocity.z = 0.01
        msg.taskspace_trajectory_points.append(new_waypoint)

    return msg

# Convert list of times to list of [x, y, z] positions based on the passed
# interpolation function
def timesToWaypoints(interpolation, times):
    waypoints = []
    for t in times:
        waypoints.append(interpolation.getPos(t))
    return waypoints

# Find the closest value in updated_times to range(number_points) and converts
# it to the new scheduled time based on the step value. Backtracks in
# updated_times can result in invalid trajectories
def getUpdatedTimes(updated_times, number_points, step):
    # Fill difs with values >> what they should be
    difs = [1000 for i in range(number_points)]
    new_times = [0 for i in range(number_points)]

    # Check each time against the idx below and above the time
    # So time = 3.1 would be checked against difs[3] and difs[4]
    for time_idx, time in enumerate(updated_times):
        # Check current value for new_times[floor(time)]
        check_idx_low = int(time)
        dif_low = fabs(time - check_idx_low)
        if dif_low < difs[check_idx_low]:
            difs[check_idx_low] = dif_low
            new_times[check_idx_low] = (time_idx * step)

        # Check current value for new_times[floor(time) + 1]
        check_idx_high = check_idx_low + 1
        if check_idx_high < (number_points - 1):
            dif_high = fabs(time - check_idx_high)
            if dif_high < difs[check_idx_high]:
                difs[check_idx_high] = dif_high
                new_times[check_idx_high] = (time_idx * step)

    return new_times

# Create and send HandTrajectoryRosMessages for left and right palm
def handleMessage(left_points, left_times, left_velocities,
    right_points, right_times, right_velocities,
    file_name):

    i = raw_input("Ready to send trajectory. Input 'q' to quit, anything else to start trajectory\n")

    if i != 'q':
        time.sleep(2)
        hand_pub.publish(toHandTrajectoryMsg(left_points, left_times,
            left_velocities, ROBOT_SIDE['left']))
        hand_pub.publish(toHandTrajectoryMsg(right_points, right_times,
            right_velocities, ROBOT_SIDE['right']))
        return True
    return False

# Build a new trajectory from current position that follows all waypoints from
# passed index on
def rebuildTraj(cur_position, orig_traj_points, orig_traj_times, orig_traj_vels, index, side):
    # Adjust times so each point takes the same time as in the original traj
    if index != 0:
        adjust_time = orig_traj_times[index - 1]
    else:
        adjust_time = orig_traj_times[index]
    new_times = [t - adjust_time for t in orig_traj_times[index:]]

    new_points = [cur_position] + orig_traj_points[index:]
    new_times = [0] + new_times
    new_vel = [[0, 0, 0]] + orig_traj_vels[index:]

    # Get updated velocity for the first point
    delta_pos = [new_points[1][i] - cur_position[i] for i in range(3)]
    updated_vel = [p / new_times[1] for p in delta_pos]
    new_vel[1] = updated_vel

    hand_pub.publish(toHandTrajectoryMsg(new_points, new_times, new_vel, side))

def checkUserInput(thread_list):
    global l_press, r_press

    # Time to wait for user input before iterating through the while loop again
    input_timeout = .1
    while not rospy.is_shutdown():
        # Check that at least one thread in thread_list is still alive
        thread_alive = False
        for t in thread_list:
            if t.is_alive():
                thread_alive = True
                break

        # If none are alive, stop checking for user input
        if thread_alive == False:
            return

        # select.select can throw an exception when a system call happens
        # Pressing CTRL+C for example will sometimes throw an exception. Since
        # CTRL+C will shutdown ros anyways, just pass in the except case
        try:
            # Use select for input provide a timeout. Using raw_input or Input
            # would block until user input which would result in threads spawned
            # as checkUserInput would block even after the trajectory finished
            sys_in = select.select([sys.stdin], [], [], input_timeout)[0]

            # If there is input, get it and check against set values
            if sys_in:
                s = sys.stdin.readline().strip()

                # Invert flags on the press of assigned key or unset flags
                # if an empty line (just "Enter") is received
                if s == 'l':
                    l_press = not l_press
                elif s == 'r':
                    r_press = not r_press
                elif s == '':
                    l_press = False
                    r_press = False
        except:
            pass

# Return if the passed position is within tolerance in each direction of the
# passed waypoint position
def isPositionWaypoint(current_position, waypoint, tolerance):
    delta_x = fabs(current_position[0] - waypoint[0])
    delta_y = fabs(current_position[1] - waypoint[1])
    delta_z = fabs(current_position[2] - waypoint[2])

    return (delta_x < tolerance and delta_y < tolerance and delta_z < tolerance)

# Return l_press or r_press based on the passed side
def isPressSide(side):
    if side == ROBOT_SIDE['left']:
        return l_press
    elif side == ROBOT_SIDE['right']:
        return r_press

# Handle user control. Currently just loops until the trajectory is resumed
def userControl(side):
    # Handle teleop or other user control here
    while not rospy.is_shutdown() and isPressSide(side) == True:
        time.sleep(.1)

# Keeps track of which waypoints have been passed. Also handles pausing/resuming
# trajectory and user control.
def checkPositionWaypoints(waypoints, waypoint_times, waypoint_vels, side, tolerance):
    ### It might make sense to take in the interpolation function and keep track
    # of Ros time for rebuilding the trajectory.

    check_position_delay = .1

    num_points = len(waypoints)
    passed_waypoints = 0

    # Get values to use based on side
    if side == ROBOT_SIDE["left"]:
        frame = "leftPalm"
        orientation = left_orientation
        offset = left_offset
    elif side == ROBOT_SIDE["right"]:
        frame = "rightPalm"
        orientation = right_orientation
        offset = right_offset

    while not rospy.is_shutdown() and passed_waypoints < num_points:
        # The ihmc controller will put the center of the palm to the waypoint
        # position. The tf package will read the palm position as the wrist
        # location. tf value is offset to try and account for this
        cur_pos = getTF(frame, REFERENCE_FRAME)[0]
        cur_pos = offsetPoints(orientation, [cur_pos], offset)[0]

        # Check if current position is within the tolerance of being "at" the
        # next waypoint
        if isPositionWaypoint(cur_pos, waypoints[passed_waypoints], tolerance):
            passed_waypoints += 1
        # Check the next waypoint to see if a waypoint was missed
        elif (passed_waypoints + 1) < num_points and isPositionWaypoint(cur_pos, waypoints[passed_waypoints + 1], tolerance):
            # Add two to catch up to current waypoint
            passed_waypoints += 2

        # Handle user input
        if isPressSide(side):
            # "Pause" motion by publishing the current position
            hand_pub.publish(toHandTrajectoryMsg([cur_pos],
                [0],
                [[0, 0, 0]],
                side))
            print "Pausing " + frame + " thread\n",
            userControl(side)
            if rospy.is_shutdown():
                break
            print "Resuming " + frame + " thread\n",
            # Get updated position before resuming trajectory
            cur_pos = offsetPoints(orientation, [getTF(frame, REFERENCE_FRAME)[0]], offset)[0]
            # Resume trajectory after user control. Continues to next waypoint
            # that has not been visited
            rebuildTraj(cur_pos, waypoints, waypoint_times, waypoint_vels,
                passed_waypoints, side)
        time.sleep(check_position_delay)

if __name__ == '__main__':
    # Define transform listener here to speedup transform lookups
    # instead of recreating a TransformListener when needed
    tfListener = tf.TransformListener()

    # Initialize ros
    hand_pub = rospy.Publisher('/ihmc_ros/valkyrie/control/hand_trajectory',
        HandTrajectoryRosMessage, queue_size = 1)
    rospy.init_node('schedule_client')
    time.sleep(1)

    # Hard-coded left and right palm positions
    left_points = [[0.36, 0.11, 0.85], [0.46, 0.37, 0.9], [0.46, 0.37, 1.1], [0.46, 0.33, 1.18], [0.46, 0.1, 1.18], [0.59, 0.1, 1.1]]
    right_points = [[0.37, -0.29, 0.85], [0.47, -0.18, 0.9], [0.38, -0.37, 1.05], [0.38, -0.52, 1.05], [0.43, -0.65, 0.9]]
    ######################

    # Offset points to get wrist position to be equal to the above positions
    left_points = offsetPoints(left_orientation, left_points, left_offset)
    right_points = offsetPoints(right_orientation, right_points, right_offset)

    # Get interpolation functions
    left_interpolation = PosInterpolation(left_points)
    right_interpolation = PosInterpolation(right_points)

    # Number of steps between waypoints
    # Number of points = (inter_step * (len(left_points) - 1)) + 1
    inter_steps = 1
    inter_left_points, left_times, left_velocities = \
        left_interpolation.getSteppedValues(inter_steps)
    inter_right_points, right_times, right_velocities = \
        right_interpolation.getSteppedValues(inter_steps)

    # Hard-coded left and right palm times for palm positions
    times = [[0.0, 0.001117530241165467, 0.002235060482330934, 0.0033525907234964007, 0.004470120964661868, 0.005587651205827335, 0.0067051814469928014, 0.00782271168815827, 0.008940241929323736, 0.010057772170489202, 0.01117530241165467, 0.012292832652820137, 0.013410362893985603, 0.014527893135151071, 0.01564542337631654, 0.016762953617482004, 0.01788048385864747, 0.01899801409981294, 0.020115544340978404, 0.021233074582143872, 0.02235060482330934, 0.023468135064474805, 0.024585665305640273, 0.02570319554680574, 0.026820725787971206, 0.027938256029136674, 0.029055786270302142, 0.03017331651146761, 0.03129084675263308, 0.03240837699379854, 0.03352590723496401, 0.034643437476129475, 0.03576096771729494, 0.03687849795846041, 0.03799602819962588, 0.03911355844079135, 0.04023108868195681, 0.04134861892312228, 0.042466149164287745, 0.04358367940545321, 0.04470120964661868, 0.04581873988778415, 0.04693627012894961, 0.04805380037011508, 0.049171330611280546, 0.050288860852446014, 0.05140639109361148, 0.05252392133477695, 0.05364145157594241, 0.05475898181710788, 0.05587651205827335, 0.056994042299438816, 0.058111572540604284, 0.05922910278176975, 0.06034663302293522, 0.06146416326410068, 0.06258169350526616, 0.06369922374643162, 0.06481675398759708, 0.06593428422876255, 0.06705181446992801, 0.06816934471109348, 0.06928687495225895, 0.07040440519342442, 0.07152193543458989, 0.07263946567575535, 0.07375699591692082, 0.07487452615808629, 0.07599205639925176, 0.07710958664041723, 0.0782271168815827, 0.07934464712274815, 0.08046217736391362, 0.08157970760507909, 0.08269723784624455, 0.08381476808741002, 0.08493229832857549, 0.08604982856974096, 0.08716735881090643, 0.0882848890520719, 0.08940241929323736, 0.09051994953440283, 0.0916374797755683, 0.09275501001673377, 0.09387254025789922, 0.09499007049906469, 0.09610760074023016, 0.09722513098139562, 0.09834266122256109, 0.09946019146372656, 0.10057772170489203, 0.1016952519460575, 0.10281278218722296, 0.10393031242838843, 0.1050478426695539, 0.10616537291071937, 0.10728290315188482, 0.10840043339305029, 0.10951796363421576, 0.11063549387538123, 0.1117530241165467, 0.11287055435771216, 0.11398808459887763, 0.1151056148400431, 0.11622314508120857, 0.11734067532237404, 0.1184582055635395, 0.11957573580470497, 0.12069326604587044, 0.1218107962870359, 0.12292832652820136, 0.12404585676936683, 0.1251633870105323, 0.12628091725169777, 0.12739844749286325, 0.1285159777340287, 0.12963350797519416, 0.13075103821635964, 0.1318685684575251, 0.13298609869869057, 0.13410362893985603, 0.1352211591810215, 0.13633868942218696, 0.13745621966335245, 0.1385737499045179, 0.13969128014568338, 0.14080881038684884, 0.14192634062801432, 0.14304387086917977, 0.14416140111034523, 0.1452789313515107, 0.14639646159267616, 0.14751399183384165, 0.1486315220750071, 0.14974905231617258, 0.15086658255733804, 0.15198411279850352, 0.15310164303966897, 0.15421917328083445, 0.1553367035219999, 0.1564542337631654, 0.15757176400433084, 0.1586892942454963, 0.15980682448666178, 0.16092435472782723, 0.16204188496899272, 0.16315941521015817, 0.16427694545132365, 0.1653944756924891, 0.1665120059336546, 0.16762953617482004, 0.16874706641598552, 0.16986459665715098, 0.17098212689831646, 0.17209965713948192, 0.17321718738064737, 0.17433471762181285, 0.1754522478629783, 0.1765697781041438, 0.17768730834530924, 0.17880483858647472, 0.17992236882764018, 0.18103989906880566, 0.18215742930997111, 0.1832749595511366, 0.18439248979230205, 0.18551002003346753, 0.186627550274633, 0.18774508051579844, 0.18886261075696392, 0.18998014099812938, 0.19109767123929486, 0.1922152014804603, 0.1933327317216258, 0.19445026196279125, 0.19556779220395673, 0.19668532244512218, 0.19780285268628767, 0.19892038292745312, 0.2000379131686186, 0.20115544340978406, 0.2022729736509495, 0.203390503892115, 0.20450803413328045, 0.20562556437444593, 0.20674309461561138, 0.20786062485677687, 0.20897815509794232, 0.2100956853391078, 0.21121321558027326, 0.21233074582143874, 0.2134482760626042, 0.21456580630376965, 0.21568333654493513, 0.21680086678610058, 0.21791839702726606, 0.21903592726843152, 0.220153457509597, 0.22127098775076245, 0.22238851799192794, 0.2235060482330934, 0.22462357847425887, 0.22574110871542433, 0.2268586389565898, 0.22797616919775526, 0.22909369943892072, 0.2302112296800862, 0.23132875992125165, 0.23244629016241714, 0.2335638204035826, 0.23468135064474807, 0.23579888088591353, 0.236916411127079, 0.23803394136824446, 0.23915147160940994, 0.2402690018505754, 0.24138653209174088, 0.24250406233290633, 0.2436215925740718, 0.24473912281523727, 0.24585665305640272, 0.2469741832975682, 0.24809171353873366, 0.24920924377989914, 0.2503267740210646, 0.2514443042622301, 0.25256183450339553, 0.253679364744561, 0.2547968949857265, 0.25591442522689195, 0.2570319554680574, 0.25814948570922286, 0.2592670159503883, 0.2603845461915538, 0.2615020764327193, 0.26261960667388473, 0.2637371369150502, 0.2648546671562157, 0.26597219739738115, 0.2670897276385466, 0.26820725787971206, 0.26932478812087757, 0.270442318362043, 0.2715598486032085, 0.27267737884437393, 0.2737949090855394, 0.2749124393267049, 0.27602996956787035, 0.2771474998090358, 0.27826503005020126, 0.27938256029136677, 0.2805000905325322, 0.2816176207736977, 0.28273515101486313, 0.28273515101486313, 0.29262381874246374, 0.3025124864700644, 0.312401154197665, 0.3222898219252656, 0.3321784896528662, 0.3420671573804669, 0.3519558251080675, 0.3618444928356681, 0.37173316056326877, 0.3816218282908694, 0.39151049601847, 0.40139916374607065, 0.41128783147367126, 0.42117649920127187, 0.43106516692887253, 0.44095383465647314, 0.45084250238407375, 0.4607311701116744, 0.470619837839275, 0.48050850556687563, 0.4903971732944763, 0.500285841022077, 0.5101745087496775, 0.5200631764772782, 0.5299518442048787, 0.5398405119324794, 0.5497291796600801, 0.5596178473876807, 0.5695065151152813, 0.5793951828428818, 0.5892838505704825, 0.5991725182980832, 0.6090611860256838, 0.6189498537532845, 0.628838521480885, 0.6387271892084856, 0.6486158569360863, 0.6585045246636869, 0.6683931923912876, 0.6782818601188881, 0.6881705278464888, 0.6980591955740894, 0.70794786330169, 0.7178365310292907, 0.7277251987568913, 0.7376138664844919, 0.7475025342120926, 0.7573912019396931, 0.7672798696672938, 0.7771685373948944, 0.787057205122495, 0.7969458728500957, 0.8068345405776963, 0.8167232083052969, 0.8266118760328975, 0.8365005437604982, 0.8463892114880988, 0.8562778792156994, 0.8661665469433001, 0.8760552146709006, 0.8859438823985013, 0.895832550126102, 0.9057212178537025, 0.9156098855813032, 0.9254985533089038, 0.9353872210365044, 0.9452758887641051, 0.9551645564917057, 0.9650532242193063, 0.974941891946907, 0.9848305596745076, 0.9947192274021082, 1.0046078951297088, 1.0144965628573095, 1.02438523058491, 1.0342738983125108, 1.0441625660401113, 1.054051233767712, 1.0639399014953126, 1.073828569222913, 1.083717236950514, 1.0936059046781144, 1.103494572405715, 1.1133832401333157, 1.1232719078609164, 1.133160575588517, 1.1430492433161175, 1.1529379110437183, 1.1628265787713188, 1.1727152464989195, 1.1826039142265201, 1.1924925819541206, 1.2023812496817214, 1.2122699174093219, 1.2221585851369225, 1.2320472528645232, 1.2419359205921239, 1.2518245883197245, 1.261713256047325, 1.2716019237749259, 1.2814905915025263, 1.2913792592301268, 1.3012679269577276, 1.311156594685328, 1.321045262412929, 1.3309339301405294, 1.3408225978681303, 1.3507112655957307, 1.3605999333233312, 1.370488601050932, 1.3803772687785325, 1.3902659365061334, 1.4001546042337338, 1.4100432719613343, 1.4199319396889352, 1.4298206074165356, 1.4397092751441365, 1.449597942871737, 1.4594866105993378, 1.4693752783269383, 1.4792639460545387, 1.4891526137821396, 1.49904128150974, 1.508929949237341, 1.5188186169649414, 1.5287072846925418, 1.5385959524201427, 1.5484846201477431, 1.558373287875344, 1.5682619556029445, 1.578150623330545, 1.5880392910581458, 1.5979279587857462, 1.6078166265133471, 1.6177052942409476, 1.6275939619685484, 1.6374826296961489, 1.6473712974237493, 1.6572599651513502, 1.6671486328789507, 1.6770373006065515, 1.686925968334152, 1.6968146360617524, 1.7067033037893533, 1.7165919715169538, 1.7264806392445546, 1.736369306972155, 1.746257974699756, 1.7561466424273564, 1.7660353101549568, 1.7759239778825577, 1.7858126456101582, 1.795701313337759, 1.8055899810653595, 1.81547864879296, 1.8253673165205608, 1.8352559842481613, 1.8451446519757622, 1.8550333197033626, 1.864921987430963, 1.874810655158564, 1.8846993228861644, 1.8945879906137653, 1.9044766583413657, 1.9143653260689666, 1.924253993796567, 1.9341426615241675, 1.9440313292517684, 1.9539199969793688, 1.9638086647069697, 1.9736973324345701, 1.9835860001621706, 1.9934746678897715, 2.003363335617372, 2.013252003344973, 2.0231406710725732, 2.033029338800174, 2.0429180065277746, 2.052806674255375, 2.062695341982976, 2.0725840097105763, 2.082472677438177, 2.0923613451657777, 2.102250012893378, 2.112138680620979, 2.1220273483485794, 2.1319160160761803, 2.1418046838037808, 2.1516933515313816, 2.161582019258982, 2.1714706869865825, 2.1813593547141834, 2.191248022441784, 2.2011366901693847, 2.211025357896985, 2.2209140256245856, 2.2308026933521865, 2.240691361079787, 2.250580028807388, 2.2604686965349883, 2.2703573642625887, 2.2802460319901896, 2.29013469971779, 2.3000233674453905, 2.3099120351729914, 2.319800702900592, 2.3296893706281927, 2.339578038355793, 2.349466706083394, 2.3593553738109945, 2.369244041538595, 2.379132709266196, 2.3890213769937962, 2.398910044721397, 2.4087987124489976, 2.418687380176598, 2.428576047904199, 2.4384647156317993, 2.4483533833594002, 2.4582420510870007, 2.4681307188146016, 2.478019386542202, 2.4879080542698024, 2.4977967219974033, 2.5076853897250038, 2.5175740574526047, 2.527462725180205, 2.5373513929078055, 2.5472400606354064, 2.557128728363007, 2.5670173960906078, 2.576906063818208, 2.5867947315458086, 2.5966833992734095, 2.60657206700101, 2.616460734728611, 2.6263494024562113, 2.636238070183812, 2.6461267379114126, 2.656015405639013, 2.665904073366614, 2.6757927410942144, 2.6856814088218153, 2.6955700765494157, 2.705458744277016, 2.715347412004617, 2.7252360797322175, 2.7351247474598184, 2.745013415187419, 2.7549020829150197, 2.76479075064262, 2.7746794183702206, 2.7845680860978215, 2.794456753825422, 2.804345421553023, 2.8142340892806232, 2.8241227570082237, 2.8340114247358246, 2.843900092463425, 2.853788760191026, 2.8636774279186263, 2.873566095646227, 2.8834547633738277, 2.893343431101428, 2.903232098829029, 2.9131207665566294, 2.9230094342842303, 2.9328981020118308, 2.942786769739431, 2.952675437467032, 2.9625641051946325, 2.9724527729222334, 2.982341440649834, 2.9922301083774343, 3.002118776105035, 3.0120074438326356, 3.0218961115602365, 3.031784779287837, 3.041673447015438, 3.0515621147430383, 3.0614507824706387, 3.0713394501982396, 3.08122811792584, 3.091116785653441, 3.1010054533810414, 3.110894121108642, 3.1207827888362427, 3.130671456563843, 3.140560124291444, 3.1504487920190445, 3.160337459746645, 3.170226127474246, 3.1801147952018463, 3.190003462929447, 3.1998921306570476, 3.2097807983846485, 3.219669466112249, 3.2295581338398494, 3.2394468015674502, 3.2493354692950507, 3.2592241370226516, 3.269112804750252, 3.2790014724778525, 3.2888901402054533, 3.298778807933054, 3.3086674756606547, 3.318556143388255, 3.328444811115856, 3.3383334788434564, 3.348222146571057, 3.3581108142986578, 3.367999482026258, 3.377888149753859, 3.3877768174814595, 3.39766548520906, 3.407554152936661, 3.4174428206642613, 3.427331488391862, 3.4372201561194626, 3.447108823847063, 3.456997491574664, 3.4668861593022644, 3.4767748270298653, 3.4866634947574657, 3.4965521624850666, 3.506440830212667, 3.5163294979402675, 3.5262181656678684, 3.536106833395469, 3.5459955011230697, 3.55588416885067, 3.5657728365782706, 3.5756615043058715, 3.585550172033472, 3.595438839761073, 3.6053275074886733, 3.615216175216274, 3.6251048429438746, 3.634993510671475, 3.644882178399076, 3.6547708461266764, 3.6646595138542772, 3.6745481815818777, 3.684436849309478, 3.694325517037079, 3.7042141847646795, 3.7141028524922803, 3.723991520219881, 3.7338801879474817, 3.743768855675082, 3.7536575234026825, 3.7635461911302834, 3.773434858857884, 3.7833235265854848, 3.793212194313085, 3.8031008620406856, 3.8129895297682865, 3.822878197495887, 3.832766865223488, 3.8426555329510883, 3.8525442006786887, 3.8624328684062896, 3.87232153613389, 3.882210203861491, 3.8920988715890914, 3.9019875393166923, 3.9118762070442927, 3.921764874771893, 3.931653542499494, 3.9415422102270945, 3.9514308779546954, 3.961319545682296, 3.9712082134098963, 3.981096881137497, 3.9909855488650976, 4.000874216592699, 4.010762884320299, 4.0206515520479, 4.0305402197755, 4.040428887503101, 4.050317555230702, 4.0602062229583025, 4.070094890685903, 4.079983558413503, 4.089872226141104, 4.099760893868705, 4.109649561596306, 4.119538229323906, 4.1294268970515065, 4.139315564779107, 4.149204232506708, 4.159092900234309, 4.168981567961909, 4.1788702356895095, 4.188758903417111, 4.198647571144711, 4.208536238872312, 4.218424906599912, 4.228313574327513, 4.238202242055114, 4.248090909782714, 4.257979577510315, 4.267868245237915, 4.277756912965516, 4.287645580693117, 4.2975342484207175, 4.307422916148318, 4.317311583875918, 4.32720025160352, 4.33708891933112, 4.346977587058721, 4.356866254786321, 4.366754922513922, 4.376643590241523, 4.386532257969123, 4.396420925696724, 4.406309593424324, 4.4161982611519255, 4.426086928879526, 4.435975596607126, 4.445864264334727, 4.455752932062327, 4.465641599789929, 4.475530267517529, 4.4854189352451295, 4.49530760297273, 4.50519627070033, 4.515084938427932, 4.524973606155532, 4.534862273883133, 4.544750941610733, 4.5546396093383335, 4.564528277065935, 4.574416944793535, 4.584305612521136, 4.594194280248736, 4.6040829479763365, 4.613971615703938, 4.623860283431538, 4.633748951159139, 4.643637618886739, 4.6535262866143405, 4.663414954341941, 4.673303622069541, 4.683192289797142, 4.693080957524742, 4.702969625252344, 4.712858292979944, 4.7227469607075445, 4.732635628435145, 4.742524296162745, 4.752412963890347, 4.762301631617947, 4.772190299345548, 4.782078967073148, 4.7919676348007485, 4.80185630252835, 4.81174497025595, 4.821633637983551, 4.831522305711151, 4.841410973438752, 4.841410973438752, 4.843418429471172, 4.845425885503594, 4.847433341536014, 4.849440797568435, 4.851448253600856, 4.853455709633277, 4.8554631656656975, 4.857470621698119, 4.8594780777305395, 4.86148553376296, 4.863492989795381, 4.865500445827802, 4.867507901860223, 4.869515357892643, 4.871522813925065, 4.873530269957485, 4.875537725989906, 4.8775451820223275, 4.879552638054748, 4.881560094087169, 4.88356755011959, 4.885575006152011, 4.887582462184431, 4.889589918216853, 4.891597374249273, 4.893604830281694, 4.895612286314115, 4.897619742346536, 4.8996271983789565, 4.901634654411377, 4.903642110443799, 4.905649566476219, 4.90765702250864, 4.909664478541061, 4.911671934573482, 4.913679390605902, 4.915686846638324, 4.9176943026707445, 4.919701758703165, 4.9217092147355865, 4.923716670768007, 4.925724126800428, 4.927731582832849, 4.92973903886527, 4.93174649489769, 4.933753950930112, 4.935761406962532, 4.937768862994953, 4.939776319027374, 4.941783775059795, 4.943791231092216, 4.945798687124636, 4.947806143157058, 4.949813599189478, 4.951821055221899, 4.95382851125432, 4.955835967286741, 4.9578434233191615, 4.959850879351583, 4.961858335384004, 4.963865791416424, 4.965873247448846, 4.967880703481266, 4.969888159513687, 4.971895615546108, 4.973903071578529, 4.975910527610949, 4.977917983643371, 4.9799254396757915, 4.981932895708212, 4.983940351740633, 4.985947807773054, 4.987955263805475, 4.989962719837895, 4.991970175870317, 4.993977631902737, 4.995985087935158, 4.997992543967579, 5.0],
             [0.0, 0.009956541845498146, 0.019913083690996293, 0.02986962553649444, 0.039826167381992586, 0.04978270922749073, 0.05973925107298888, 0.06969579291848703, 0.07965233476398517, 0.08960887660948332, 0.09956541845498146, 0.10952196030047961, 0.11947850214597776, 0.1294350439914759, 0.13939158583697406, 0.1493481276824722, 0.15930466952797034, 0.1692612113734685, 0.17921775321896663, 0.1891742950644648, 0.19913083690996292, 0.20908737875546107, 0.21904392060095923, 0.22900046244645736, 0.23895700429195552, 0.24891354613745367, 0.2588700879829518, 0.26882662982844996, 0.2787831716739481, 0.2887397135194463, 0.2986962553649444, 0.30865279721044253, 0.3186093390559407, 0.32856588090143884, 0.338522422746937, 0.3484789645924351, 0.35843550643793326, 0.3683920482834314, 0.3783485901289296, 0.38830513197442773, 0.39826167381992583, 0.408218215665424, 0.41817475751092215, 0.4281312993564203, 0.43808784120191846, 0.4480443830474166, 0.4580009248929147, 0.4679574667384129, 0.47791400858391103, 0.4878705504294092, 0.49782709227490735, 0.5077836341204055, 0.5177401759659036, 0.5276967178114018, 0.5376532596568999, 0.547609801502398, 0.5575663433478962, 0.5675228851933943, 0.5774794270388925, 0.5874359688843906, 0.5973925107298887, 0.607349052575387, 0.6173055944208851, 0.6272621362663833, 0.6372186781118814, 0.6471752199573795, 0.6571317618028777, 0.6670883036483758, 0.677044845493874, 0.6870013873393721, 0.6969579291848702, 0.7069144710303684, 0.7168710128758665, 0.7268275547213647, 0.7367840965668628, 0.7467406384123609, 0.7566971802578591, 0.7666537221033572, 0.7766102639488555, 0.7865668057943536, 0.7965233476398517, 0.8064798894853499, 0.816436431330848, 0.8263929731763462, 0.8363495150218443, 0.8463060568673425, 0.8562625987128406, 0.8662191405583387, 0.8761756824038369, 0.886132224249335, 0.8960887660948332, 0.9060453079403313, 0.9160018497858294, 0.9259583916313276, 0.9359149334768257, 0.945871475322324, 0.9558280171678221, 0.9657845590133202, 0.9757411008588184, 0.9856976427043165, 0.9956541845498147, 1.005610726395313, 1.015567268240811, 1.025523810086309, 1.0354803519318072, 1.0454368937773053, 1.0553934356228036, 1.0653499774683017, 1.0753065193137998, 1.085263061159298, 1.095219603004796, 1.1051761448502944, 1.1151326866957925, 1.1250892285412906, 1.1350457703867887, 1.1450023122322868, 1.154958854077785, 1.1649153959232832, 1.1748719377687813, 1.1848284796142794, 1.1947850214597775, 1.2047415633052758, 1.214698105150774, 1.224654646996272, 1.2346111888417701, 1.2445677306872682, 1.2545242725327665, 1.2644808143782647, 1.2744373562237628, 1.2843938980692609, 1.294350439914759, 1.3043069817602573, 1.3142635236057554, 1.3242200654512535, 1.3341766072967516, 1.3441331491422497, 1.354089690987748, 1.364046232833246, 1.3740027746787442, 1.3839593165242423, 1.3939158583697404, 1.4038724002152387, 1.4138289420607368, 1.423785483906235, 1.433742025751733, 1.4436985675972311, 1.4536551094427295, 1.4636116512882276, 1.4735681931337257, 1.4835247349792238, 1.4934812768247219, 1.5034378186702202, 1.5133943605157183, 1.5233509023612164, 1.5333074442067145, 1.5432639860522126, 1.553220527897711, 1.563177069743209, 1.5731336115887071, 1.5830901534342052, 1.5930466952797033, 1.6030032371252017, 1.6129597789706998, 1.6229163208161979, 1.632872862661696, 1.6428294045071943, 1.6527859463526924, 1.6627424881981905, 1.6726990300436886, 1.6826555718891867, 1.692612113734685, 1.702568655580183, 1.7125251974256812, 1.7224817392711793, 1.7324382811166774, 1.7423948229621757, 1.7523513648076738, 1.762307906653172, 1.77226444849867, 1.7822209903441681, 1.7921775321896665, 1.8021340740351646, 1.8120906158806627, 1.8220471577261608, 1.8320036995716589, 1.8419602414171572, 1.8519167832626553, 1.8618733251081534, 1.8718298669536515, 1.8817864087991496, 1.891742950644648, 1.901699492490146, 1.9116560343356441, 1.9216125761811422, 1.9315691180266403, 1.9415256598721387, 1.9514822017176368, 1.9614387435631349, 1.971395285408633, 1.981351827254131, 1.9913083690996294, 2.0012649109451273, 2.011221452790626, 2.021177994636124, 2.031134536481622, 2.04109107832712, 2.051047620172618, 2.0610041620181163, 2.0709607038636144, 2.0809172457091125, 2.0908737875546106, 2.1008303294001087, 2.1107868712456073, 2.1207434130911054, 2.1306999549366035, 2.1406564967821016, 2.1506130386275997, 2.1605695804730978, 2.170526122318596, 2.180482664164094, 2.190439206009592, 2.20039574785509, 2.2103522897005887, 2.220308831546087, 2.230265373391585, 2.240221915237083, 2.250178457082581, 2.2601349989280792, 2.2700915407735773, 2.2800480826190754, 2.2900046244645735, 2.2999611663100716, 2.30991770815557, 2.3198742500010683, 2.3298307918465664, 2.3397873336920645, 2.3497438755375626, 2.3597004173830607, 2.369656959228559, 2.379613501074057, 2.389570042919555, 2.399526584765053, 2.4094831266105516, 2.4194396684560497, 2.429396210301548, 2.439352752147046, 2.449309293992544, 2.459265835838042, 2.4692223776835402, 2.4791789195290383, 2.4891354613745365, 2.4990920032200346, 2.509048545065533, 2.519005086911031, 2.519005086911031, 2.5205184013216018, 2.522031715732172, 2.5235450301427425, 2.5250583445533126, 2.526571658963883, 2.5280849733744533, 2.529598287785024, 2.531111602195594, 2.5326249166061645, 2.5341382310167346, 2.535651545427305, 2.5371648598378753, 2.538678174248446, 2.540191488659016, 2.5417048030695866, 2.5432181174801567, 2.5447314318907273, 2.5462447463012974, 2.547758060711868, 2.549271375122438, 2.5507846895330086, 2.5522980039435788, 2.5538113183541493, 2.5553246327647194, 2.55683794717529, 2.55835126158586, 2.5598645759964307, 2.561377890407001, 2.5628912048175714, 2.5644045192281415, 2.565917833638712, 2.567431148049282, 2.5689444624598528, 2.570457776870423, 2.5719710912809934, 2.573484405691564, 2.574997720102134, 2.5765110345127047, 2.578024348923275, 2.5795376633338454, 2.5810509777444155, 2.582564292154986, 2.584077606565556, 2.5855909209761267, 2.587104235386697, 2.5886175497972674, 2.5901308642078376, 2.591644178618408, 2.5931574930289782, 2.594670807439549, 2.596184121850119, 2.5976974362606895, 2.5992107506712596, 2.60072406508183, 2.6022373794924003, 2.603750693902971, 2.605264008313541, 2.6067773227241116, 2.6082906371346817, 2.6098039515452522, 2.6113172659558224, 2.612830580366393, 2.614343894776963, 2.6158572091875336, 2.6173705235981037, 2.6188838380086743, 2.6203971524192444, 2.621910466829815, 2.623423781240385, 2.6249370956509557, 2.6264504100615262, 2.6279637244720964, 2.629477038882667, 2.630990353293237, 2.6325036677038076, 2.6340169821143777, 2.6355302965249483, 2.6370436109355184, 2.638556925346089, 2.640070239756659, 2.6415835541672297, 2.6430968685778, 2.6446101829883704, 2.6461234973989405, 2.647636811809511, 2.649150126220081, 2.6506634406306517, 2.652176755041222, 2.6536900694517924, 2.6552033838623625, 2.656716698272933, 2.6582300126835032, 2.659743327094074, 2.661256641504644, 2.6627699559152145, 2.6642832703257846, 2.665796584736355, 2.6673098991469253, 2.668823213557496, 2.670336527968066, 2.6718498423786365, 2.6733631567892067, 2.6748764711997772, 2.676389785610348, 2.677903100020918, 2.679416414431488, 2.6809297288420586, 2.682443043252629, 2.6839563576631993, 2.68546967207377, 2.68698298648434, 2.6884963008949105, 2.6900096153054807, 2.6915229297160512, 2.6930362441266213, 2.694549558537192, 2.696062872947762, 2.6975761873583326, 2.6990895017689027, 2.7006028161794733, 2.7021161305900434, 2.703629445000614, 2.705142759411184, 2.7066560738217547, 2.708169388232325, 2.7096827026428953, 2.7111960170534655, 2.712709331464036, 2.714222645874606, 2.7157359602851767, 2.717249274695747, 2.7187625891063174, 2.7202759035168875, 2.721789217927458, 2.723302532338028, 2.724815846748599, 2.726329161159169, 2.7278424755697395, 2.7293557899803096, 2.73086910439088, 2.7323824188014507, 2.733895733212021, 2.735409047622591, 2.7369223620331615, 2.738435676443732, 2.739948990854302, 2.741462305264873, 2.742975619675443, 2.7444889340860135, 2.7460022484965836, 2.747515562907154, 2.7490288773177243, 2.750542191728295, 2.752055506138865, 2.7535688205494355, 2.7550821349600056, 2.756595449370576, 2.7581087637811463, 2.759622078191717, 2.761135392602287, 2.7626487070128576, 2.7641620214234277, 2.7656753358339983, 2.7671886502445684, 2.768701964655139, 2.770215279065709, 2.7717285934762796, 2.7732419078868498, 2.7747552222974203, 2.7762685367079905, 2.777781851118561, 2.779295165529131, 2.7808084799397017, 2.7823217943502723, 2.7838351087608424, 2.7853484231714125, 2.786861737581983, 2.7883750519925536, 2.7898883664031238, 2.791401680813694, 2.7929149952242645, 2.794428309634835, 2.795941624045405, 2.7974549384559757, 2.798968252866546, 2.8004815672771164, 2.8019948816876865, 2.803508196098257, 2.805021510508827, 2.8065348249193978, 2.808048139329968, 2.8095614537405385, 2.8110747681511086, 2.812588082561679, 2.8141013969722493, 2.81561471138282, 2.81712802579339, 2.8186413402039605, 2.8201546546145306, 2.821667969025101, 2.8231812834356713, 2.824694597846242, 2.826207912256812, 2.8277212266673826, 2.8292345410779527, 2.8307478554885233, 2.8322611698990934, 2.833774484309664, 2.835287798720234, 2.8368011131308046, 2.838314427541375, 2.8398277419519453, 2.8413410563625154, 2.842854370773086, 2.8443676851836566, 2.8458809995942267, 2.8473943140047973, 2.8489076284153674, 2.850420942825938, 2.851934257236508, 2.8534475716470786, 2.8549608860576488, 2.8564742004682193, 2.8579875148787894, 2.85950082928936, 2.86101414369993, 2.8625274581105007, 2.864040772521071, 2.8655540869316414, 2.8670674013422115, 2.868580715752782, 2.870094030163352, 2.8716073445739227, 2.873120658984493, 2.8746339733950634, 2.8761472878056336, 2.877660602216204, 2.8791739166267742, 2.880687231037345, 2.882200545447915, 2.8837138598584855, 2.8852271742690556, 2.886740488679626, 2.8882538030901967, 2.889767117500767, 2.891280431911337, 2.8927937463219076, 2.894307060732478, 2.8958203751430482, 2.8973336895536184, 2.898847003964189, 2.9003603183747595, 2.9018736327853296, 2.9033869471959, 2.9049002616064703, 2.906413576017041, 2.907926890427611, 2.9094402048381816, 2.9109535192487517, 2.9124668336593222, 2.9139801480698924, 2.915493462480463, 2.917006776891033, 2.9185200913016036, 2.9200334057121737, 2.9215467201227443, 2.9230600345333144, 2.924573348943885, 2.926086663354455, 2.9275999777650257, 2.929113292175596, 2.9306266065861664, 2.9321399209967365, 2.933653235407307, 2.935166549817877, 2.9366798642284477, 2.938193178639018, 2.9397064930495884, 2.9412198074601585, 2.942733121870729, 2.9442464362812997, 2.94575975069187, 2.94727306510244, 2.9487863795130105, 2.950299693923581, 2.951813008334151, 2.9533263227447217, 2.954839637155292, 2.9563529515658624, 2.9578662659764325, 2.959379580387003, 2.9608928947975732, 2.962406209208144, 2.963919523618714, 2.9654328380292845, 2.9669461524398546, 2.968459466850425, 2.9699727812609953, 2.971486095671566, 2.972999410082136, 2.9745127244927065, 2.9760260389032767, 2.9775393533138472, 2.9790526677244173, 2.980565982134988, 2.982079296545558, 2.9835926109561286, 2.9851059253666987, 2.9866192397772693, 2.9881325541878394, 2.98964586859841, 2.99115918300898, 2.9926724974195507, 2.9941858118301212, 2.9956991262406913, 2.9972124406512615, 2.998725755061832, 3.0002390694724026, 3.0017523838829727, 3.003265698293543, 3.0047790127041134, 3.006292327114684, 3.007805641525254, 3.0093189559358247, 3.010832270346395, 3.0123455847569653, 3.0138588991675355, 3.015372213578106, 3.016885527988676, 3.0183988423992467, 3.019912156809817, 3.0214254712203874, 3.0229387856309575, 3.024452100041528, 3.025965414452098, 3.0274787288626688, 3.028992043273239, 3.0305053576838095, 3.0320186720943796, 3.03353198650495, 3.0350453009155203, 3.036558615326091, 3.038071929736661, 3.0395852441472315, 3.0410985585578016, 3.042611872968372, 3.0441251873789428, 3.045638501789513, 3.047151816200083, 3.0486651306106536, 3.050178445021224, 3.0516917594317943, 3.0532050738423644, 3.054718388252935, 3.0562317026635055, 3.0577450170740756, 3.0592583314846458, 3.0607716458952163, 3.062284960305787, 3.063798274716357, 3.065311589126927, 3.0668249035374977, 3.0683382179480683, 3.0698515323586384, 3.071364846769209, 3.072878161179779, 3.0743914755903496, 3.0759047900009198, 3.0774181044114903, 3.0789314188220605, 3.080444733232631, 3.081958047643201, 3.0834713620537717, 3.084984676464342, 3.0864979908749124, 3.0880113052854825, 3.089524619696053, 3.091037934106623, 3.0925512485171938, 3.0940645629277643, 3.0955778773383344, 3.0970911917489046, 3.098604506159475, 3.1001178205700457, 3.101631134980616, 3.103144449391186, 3.1046577638017565, 3.106171078212327, 3.107684392622897, 3.1091977070334673, 3.110711021444038, 3.1122243358546084, 3.1137376502651786, 3.1152509646757487, 3.1167642790863193, 3.11827759349689, 3.11979090790746, 3.1213042223180305, 3.1228175367286006, 3.124330851139171, 3.1258441655497413, 3.127357479960312, 3.128870794370882, 3.1303841087814526, 3.1318974231920227, 3.1334107376025933, 3.1349240520131634, 3.136437366423734, 3.137950680834304, 3.1394639952448746, 3.1409773096554447, 3.1424906240660153, 3.1440039384765854, 3.145517252887156, 3.147030567297726, 3.1485438817082967, 3.1500571961188673, 3.1515705105294374, 3.1530838249400075, 3.154597139350578, 3.1561104537611486, 3.1576237681717187, 3.159137082582289, 3.1606503969928594, 3.16216371140343, 3.163677025814, 3.1651903402245702, 3.166703654635141, 3.1682169690457114, 3.1697302834562815, 3.1712435978668516, 3.172756912277422, 3.1742702266879927, 3.175783541098563, 3.1772968555091334, 3.1788101699197036, 3.180323484330274, 3.1818367987408442, 3.183350113151415, 3.184863427561985, 3.1863767419725555, 3.1878900563831256, 3.189403370793696, 3.1909166852042663, 3.192429999614837, 3.193943314025407, 3.1954566284359776, 3.1969699428465477, 3.1984832572571182, 3.1999965716676884, 3.201509886078259, 3.203023200488829, 3.2045365148993996, 3.20604982930997, 3.2075631437205403, 3.2090764581311104, 3.210589772541681, 3.2121030869522516, 3.2136164013628217, 3.215129715773392, 3.2166430301839624, 3.2166430301839624, 3.226558941194292, 3.2364748522046214, 3.246390763214951, 3.256306674225281, 3.26622258523561, 3.27613849624594, 3.2860544072562696, 3.295970318266599, 3.3058862292769287, 3.3158021402872584, 3.3257180512975877, 3.3356339623079174, 3.345549873318247, 3.3554657843285765, 3.365381695338906, 3.375297606349236, 3.385213517359565, 3.395129428369895, 3.4050453393802247, 3.414961250390554, 3.4248771614008837, 3.4347930724112135, 3.4447089834215427, 3.4546248944318725, 3.464540805442202, 3.474456716452532, 3.4843726274628612, 3.494288538473191, 3.5042044494835203, 3.51412036049385, 3.5240362715041798, 3.5339521825145095, 3.543868093524839, 3.5537840045351685, 3.563699915545498, 3.5736158265558275, 3.5835317375661573, 3.593447648576487, 3.6033635595868163, 3.613279470597146, 3.6231953816074753, 3.633111292617805, 3.643027203628135, 3.6529431146384646, 3.662859025648794, 3.6727749366591236, 3.6826908476694533, 3.6926067586797826, 3.7025226696901123, 3.712438580700442, 3.7223544917107714, 3.732270402721101, 3.7421863137314304, 3.75210222474176, 3.76201813575209, 3.7719340467624196, 3.781849957772749, 3.7917658687830786, 3.8016817797934084, 3.8115976908037377, 3.8215136018140674, 3.831429512824397, 3.8413454238347264, 3.851261334845056, 3.861177245855386, 3.871093156865715, 3.881009067876045, 3.8909249788863747, 3.900840889896704, 3.9107568009070337, 3.9206727119173634, 3.9305886229276927, 3.9405045339380225, 3.950420444948352, 3.960336355958682, 3.9702522669690112, 3.980168177979341, 3.9900840889896703, 4.0]]
    ######################

    # Convert times back to where they were in the original,
    # non-interpolated trajectory.
    updated_left_times = [t / float(inter_steps) for t in times[0]]
    updated_right_times = [t / float(inter_steps) for t in times[1]]

    # Convert scheduled times to positions by using the original interpolation
    # function
    left_sched_points = timesToWaypoints(left_interpolation, updated_left_times)
    right_sched_points = timesToWaypoints(right_interpolation, updated_right_times)

    # Get constant time-step values for the new points
    left_sched_times = []
    right_sched_times = []
    left_step = float(len(left_points) - 1) / float(len(left_sched_points) - 1)
    for idx in range(len(left_sched_points)):
        left_sched_times.append(left_step * idx)
    right_step = float(len(right_points) - 1) / float(len(right_sched_points) - 1)
    for idx in range(len(right_sched_points)):
        right_sched_times.append(right_step * idx)

    # Get interpolation functions for new states. These functions will be used
    # for getting new velocities
    left_interpolation = PosInterpolation(left_sched_points, left_sched_times)
    right_interpolation = PosInterpolation(right_sched_points, right_sched_times)

    # Get time for where the original waypoints (or closest point to original)
    # lie on the scheduled trajectory. This ensures the originally set waypoints
    # are not missed due to interpolation
    left_original_times = getUpdatedTimes(updated_left_times, len(left_points), left_step)
    right_original_times = getUpdatedTimes(updated_right_times, len(right_points), right_step)

    # Get velocity values to use
    left_sched_vel = [left_interpolation.getVel(t) for t in left_sched_times]
    right_sched_vel = [right_interpolation.getVel(t) for t in right_sched_times]

    # Down-sample the scheduled trajectory to avoid a large number of waypoints
    # inter_steps is number of points between each pair of original points.
    inter_steps = 3
    left_times, inter_left_points, left_vel = downsample(left_interpolation, left_original_times, inter_steps)
    right_times, inter_right_points, right_vel = downsample(right_interpolation, right_original_times, inter_steps)

    # Send downsampled points and accept user input to pause/resume trajectory
    if handleMessage(inter_left_points, left_times, left_vel,
        inter_right_points, right_times, right_vel,
        'waypoint'):

        # Value of tolerance for reaching a waypoint
        pos_delta = 0.05

        # Handle left palm pause/resume functions
        left_thread = threading.Thread(target = checkPositionWaypoints,
            args = (inter_left_points, left_times, left_vel, ROBOT_SIDE["left"],
            pos_delta))

        # Handle right palm pause/resume functions
        right_thread = threading.Thread(target = checkPositionWaypoints,
            args = (inter_right_points, right_times, right_vel, ROBOT_SIDE["right"],
            pos_delta))

        # Let user know how to start and stop manual control
        print 'l to pause/resume left palm\nr to pause/resume right palm\nEnter with no input resumes both'

        # Start threads for tracking left and right palm waypoints
        left_thread.start()
        right_thread.start()

        # Allow user input for pausing each hand. This functions loops
        # until all the threads are no longer alive
        checkUserInput([left_thread, right_thread])

        # Wait for threads to finish before quiting
        left_thread.join()
        right_thread.join()
